{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"final.ipynb","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.8"}},"cells":[{"cell_type":"code","metadata":{"id":"YtW_9SdgrkBt"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1H70tCg_qXqJ"},"source":["import sys\n","import os\n","import requests\n","import subprocess\n","import shutil\n","from logging import getLogger, StreamHandler, INFO\n","\n","\n","logger = getLogger(__name__)\n","logger.addHandler(StreamHandler())\n","logger.setLevel(INFO)\n","\n","\n","def install(\n","        chunk_size=4096,\n","        file_name=\"Miniconda3-latest-Linux-x86_64.sh\",\n","        url_base=\"https://repo.continuum.io/miniconda/\",\n","        conda_path=os.path.expanduser(os.path.join(\"~\", \"miniconda\")),\n","        rdkit_version=None,\n","        add_python_path=True,\n","        force=False):\n","    \"\"\"install rdkit from miniconda\n","    ```\n","    import rdkit_installer\n","    rdkit_installer.install()\n","    ```\n","    \"\"\"\n","\n","    python_path = os.path.join(\n","        conda_path,\n","        \"lib\",\n","        \"python{0}.{1}\".format(*sys.version_info),\n","        \"site-packages\",\n","    )\n","\n","    if add_python_path and python_path not in sys.path:\n","        logger.info(\"add {} to PYTHONPATH\".format(python_path))\n","        sys.path.append(python_path)\n","\n","    if os.path.isdir(os.path.join(python_path, \"rdkit\")):\n","        logger.info(\"rdkit is already installed\")\n","        if not force:\n","            return\n","\n","        logger.info(\"force re-install\")\n","\n","    url = url_base + file_name\n","    python_version = \"{0}.{1}.{2}\".format(*sys.version_info)\n","\n","    logger.info(\"python version: {}\".format(python_version))\n","\n","    if os.path.isdir(conda_path):\n","        logger.warning(\"remove current miniconda\")\n","        shutil.rmtree(conda_path)\n","    elif os.path.isfile(conda_path):\n","        logger.warning(\"remove {}\".format(conda_path))\n","        os.remove(conda_path)\n","\n","    logger.info('fetching installer from {}'.format(url))\n","    res = requests.get(url, stream=True)\n","    res.raise_for_status()\n","    with open(file_name, 'wb') as f:\n","        for chunk in res.iter_content(chunk_size):\n","            f.write(chunk)\n","    logger.info('done')\n","\n","    logger.info('installing miniconda to {}'.format(conda_path))\n","    subprocess.check_call([\"bash\", file_name, \"-b\", \"-p\", conda_path])\n","    logger.info('done')\n","\n","    logger.info(\"installing rdkit\")\n","    subprocess.check_call([\n","        os.path.join(conda_path, \"bin\", \"conda\"),\n","        \"install\",\n","        \"--yes\",\n","        \"-c\", \"rdkit\",\n","        \"python=={}\".format(python_version),\n","        \"rdkit\" if rdkit_version is None else \"rdkit=={}\".format(rdkit_version)])\n","    logger.info(\"done\")\n","\n","    import rdkit\n","    logger.info(\"rdkit-{} installation finished!\".format(rdkit.__version__))\n","\n","\n","if __name__ == \"__main__\":\n","    install()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"-AxRlBHazk0c"},"source":["**Installing a package for mol2vec**"]},{"cell_type":"code","metadata":{"id":"-wTOpwJYrA9v"},"source":["!pip install git+https://github.com/samoturk/mol2vec;"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yYkAOQTLsgxf"},"source":["#import the essential libraries\n","\n","\n","%matplotlib inline\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ozSYVNdjsg6A"},"source":["train =  pd.read_csv('/content/gdrive/MyDrive/Drug/train.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1C3UdEVhshAt"},"source":["train.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ldofwBYlV2To"},"source":["\n","train_aff = train['Binding Affinity']\n","train.drop(columns='Binding Affinity',inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GmdYWZG8WUY8"},"source":["train.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"epn3OMkpWZW-"},"source":["#It stores the binding affinity\n","train_aff.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rGHyT2AnshIS"},"source":["test = pd.read_csv('/content/gdrive/MyDrive/Drug/test.csv')\n","test_name = pd.read_csv('/content/gdrive/MyDrive/Drug/test.csv')## Creating this just as a copy of test data to create the csv using this later"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3tPM7LjgtAoa"},"source":["test.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_kh4GVrApMzM"},"source":["\n","test_name.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2aVCMNmeaa8y"},"source":["test.drop(columns='Binding Affinity',inplace=True)\n","test_name.drop(columns='Binding Affinity',inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Otp9Y8ajalsR"},"source":["test.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5TShmLbrpTxO"},"source":["test_name.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"btfPxwsMtCCQ"},"source":["##This is the sample of submission (Submission must be in this format)\n","sample =  pd.read_csv('/content/gdrive/MyDrive/Drug/submission.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iwjQ-fyBtbUA"},"source":["sample.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RTueEkL5tdH4"},"source":["from rdkit import Chem \n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vzwPVwDeuKtm"},"source":["train['mol'] = train['SMILES sequence'].apply(lambda x: Chem.MolFromSmiles(x)) \n","test['mol'] = test['SMILES sequence'].apply(lambda x: Chem.MolFromSmiles(x)) "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4kAwB08IvQbG"},"source":["#Now let's see what we've got\n","print(type(train['mol'][0]))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pKrhaxdsl3qc"},"source":["print(type(test['mol'][0]))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VZ4T2o_6wL2_"},"source":["from rdkit.Chem import Draw\n","mols = train['mol'][:2]\n","\n","#MolsToGridImage allows to paint a number of molecules at a time\n","Draw.MolsToGridImage(mols, molsPerRow=5, useSVG=True, legends=list(train['SMILES sequence'][:20].values))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dpuXPBv_0u3i"},"source":["![alt text](https://drive.google.com/uc?id=1exJGBWzAM7L5cN9oAzFAVPhuw9Uv3Wja)"]},{"cell_type":"code","metadata":{"id":"1sjVdH3Xwhx3"},"source":["train.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wpEJkEU6kz5C"},"source":["test.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DdyW3juewU9T"},"source":["\n","\n","#Now we'll load a pre-trained mol2vec model. It's trained with radius=1 for Morgan fingerprints to yield 300 dimensional embeddings.\n","\n","#Loading pre-trained model via word2vec\n","from gensim.models import word2vec\n","model = word2vec.Word2Vec.load('/content/gdrive/MyDrive/Drug/model_300dim.pkl')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YFEvswKYbRZi"},"source":["from mol2vec.features import mol2alt_sentence, mol2sentence, MolSentence, DfVec, sentences2vec\n","from gensim.models import word2vec"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uJH5r7sNbbJ5"},"source":["print('Molecular sentence:', mol2alt_sentence(train['mol'][1], radius=1))\n","print('\\nMolSentence object:', MolSentence(mol2alt_sentence(train['mol'][1], radius=1)))\n","print('\\nDfVec object:',DfVec(sentences2vec(MolSentence(mol2alt_sentence(train['mol'][1], radius=1)), model, unseen='UNK')))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"1WmrzER9qCeV"},"source":["print('Molecular sentence:', mol2alt_sentence(test['mol'][1], radius=1))\n","print('\\nMolSentence object:', MolSentence(mol2alt_sentence(test['mol'][1], radius=1)))\n","print('\\nDfVec object:',DfVec(sentences2vec(MolSentence(mol2alt_sentence(test['mol'][1], radius=1)), model, unseen='UNK')))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"9EMJfBAhbn-4"},"source":["#Constructing sentences\n","train['sentence'] = train.apply(lambda x: MolSentence(mol2alt_sentence(x['mol'], 1)), axis=1)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"F3X6deZWql05"},"source":["test['sentence'] = test.apply(lambda x: MolSentence(mol2alt_sentence(x['mol'], 1)), axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_rI5ffXNbvu4"},"source":["#Extracting embeddings to a numpy.array\n","#Note that we always should mark unseen='UNK' in sentence2vec() so that model is taught how to handle unknown substructures\n","train['mol2vec'] = [DfVec(x) for x in sentences2vec(train['sentence'], model, unseen='UNK')]\n","X = np.array([x.vec for x in train['mol2vec']])\n","y = train_aff.values\n","\n","X.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8-dkjrrZlA4J"},"source":["test['mol2vec'] = [DfVec(x) for x in sentences2vec(test['sentence'], model, unseen='UNK')]\n","test_value= np.array([x.vec for x in test['mol2vec']])\n","test_value.shape"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Ic1DgQnn3KId"},"source":["We split the data into train and validate and analyze with various different regression algorithms like Ridge,svm,lasso,etc and also with their different parameters"]},{"cell_type":"code","metadata":{"id":"irT9ylpMcCW-"},"source":["from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.1, random_state=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"IlkNPCJzcHw-"},"source":["from sklearn import svm"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2v11TF073e8e"},"source":["After alot of testing we have found out that at C=100 our data works best"]},{"cell_type":"markdown","metadata":{"id":"ALO7NpCU3y7M"},"source":["Testing with SVM"]},{"cell_type":"code","metadata":{"id":"-w519Is6c75J"},"source":["clf = svm.SVR(C=100)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"yJBRgV8bdFh-"},"source":["clf.fit(X_train, y_train)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UI7Zf25YdM8k"},"source":["y_pred=clf.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"c-ZiqdMAdpKM"},"source":["    from sklearn.metrics import mean_squared_error\n","    from math import sqrt\n","    rmse = sqrt(mean_squared_error(y_test, y_pred))\n","    print(rmse)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OwNYW0EueNiq"},"source":["from sklearn.metrics import mean_absolute_error"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ve967UDPeaL5"},"source":["mean_absolute_error(y_test, y_pred)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SANClq9M32nV"},"source":["Testing with Ridge"]},{"cell_type":"code","metadata":{"id":"Vn5lIfBlefTN"},"source":["from sklearn.linear_model import RidgeCV\n","ridge = RidgeCV()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"f-hrPyiYiSvn"},"source":["ridge.fit(X_train, y_train)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"E2yO34b2iyu6"},"source":["y_pred_r = ridge.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LtdXlke7i62f"},"source":["rmse = sqrt(mean_squared_error(y_test, y_pred_r))\n","rmse"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"R7rZlhlsjY90"},"source":["print(mean_absolute_error(y_test, y_pred_r))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"VERk8_OR4OKa"},"source":["We have found out that of all Svm.SVR works best of sll the algorithm with 'C' value of 100"]},{"cell_type":"code","metadata":{"id":"seN8bJ-d1-tk"},"source":["clf1 = svm.SVR(C=100)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wEjZunKJ1-7Q"},"source":["clf1.fit(X, y)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JSydIAj81_Dl"},"source":["y_pred_svm=clf.predict(test_value)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JzmrgTI5w2iU"},"source":[" final_aff=y_pred_svm.tolist()\n"," type(final_aff)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"l-cAjl8bvMnJ"},"source":[" final_test= test_name.values.tolist()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"P9nmEvH6vMsS"},"source":["type(final_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rDd-U5-f5TbR"},"source":["print(final_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JCknU2fKZFJ5"},"source":["# The final_list which contains the name of chemical compounds in SMILES format is being converted from 2D to 1D.\n","from itertools import chain \n","final_name = list(chain.from_iterable(final_test)) "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6JYqCy24Zn4y"},"source":["print(final_name)"],"execution_count":null,"outputs":[]}]}
